#!/usr/bin/perl -w

use strict;
use XML::LibXML;

my $dictdir = '../../resources/dictionaries';
my $mainclass = '../../src/DatatoolTk.java';
my $base = 'datatooltk';

if ($#ARGV > 1 || $#ARGV < 0)
{
   die "Syntax: $0 <lang> [<region>]\n";
}

my $lang = $ARGV[0];

my $locale = $lang;

if ($#ARGV == 1)
{
  $locale .= "-".$ARGV[1];
}

open FD, $mainclass or die "Can't open '$mainclass' $!\n";

my %dict = ();

while (<FD>)
{
   if (/public +static +final +String +appName *= *"([^"]+)"/)
   {
      $dict{appname} = $1;
   }
   elsif (/public +static +final +String +appVersion *= *"([^"]+)"/)
   {
      $dict{appversion} = $1;
   }
   elsif (/public +static +final +String +appDate *= *"([^"]+)"/)
   {
      $dict{appdate} = $1;
   }
}

close FD;

my $propfile = "$dictdir/$base-$locale.prop";

if (not (-e $propfile) and ($lang ne $locale))
{
   $propfile = "$dictdir/$base-$lang.prop";

   unless (-e $propfile)
   {
      die "Can't find either '$dictdir/$base-$locale.prop' or '$propfile'\n";
   }
}

unless (-e $propfile)
{
   die "Can't find '$propfile'\n";
}

open FD, $propfile or die "Can't open '$propfile' $!\n";

my $linenum = 0;

while (<FD>)
{
   $linenum++;

   next if (/^ *#/ or /^ *$/);

   if (/^([^=]+)=(.*)$/)
   {
      $dict{$1} = $2;
   }
   else
   {
      warn "$propfile: Can't parse line $linenum\n";
   }
}

close FD;

my $xmlfile = "$base-$locale.xml";

if (not (-e $xmlfile) and ($lang ne $locale))
{
   $xmlfile = "$base-$lang.xml";

   unless (-e $xmlfile)
   {
      die "Can't find either '$base-$locale.xml' or '$xmlfile'\n";
   }
}

unless (-e $xmlfile)
{
   die "Can't find '$xmlfile'\n";
}

my $texfile = "$base-$locale.tex";
my $helpsetdir = "$dictdir/helpset-$locale";

unless (-e $helpsetdir)
{
   mkdir $helpsetdir or die "Can't mkdir '$helpsetdir' $!\n";
}

unless (-d $helpsetdir)
{
   die "'$helpsetdir' is not a directory\n";
}

my $parser = XML::LibXML->new();
my $doc = $parser->load_xml(location=>$xmlfile);

my $inputenc = $doc->findnodes('/manual/preamble/inputenc');
my $fontenc = $doc->findnodes('/manual/preamble/fontenc');
my $title = $doc->findnodes('/manual/preamble/title');
my $date  = $doc->findnodes('/manual/preamble/date');
my $author = $doc->findnodes('/manual/preamble/author');

my %acros = ();

foreach my $newacro ($doc->findnodes('/manual/preamble/newacro'))
{
   my $label = $newacro->textContent;

   my $attr = $newacro->attributes();

   if ($attr->getNamedItem('short')=~/short *= *"(.*)"/)
   {
      $acros{$label}->{Short} = $1;
   }

   if ($attr->getNamedItem('long')=~/long="(.*)"/)
   {
      $acros{$label}->{Long} = $1;
   }

   unless ($acros{$label}->{Short})
   {
      warn "Acronym '$label' missing 'short' attribute\n";
   }

   unless ($acros{$label}->{Long})
   {
      warn "Acronym '$label' missing 'long' attribute\n";
   }
}

open TEXFD, ">$texfile" or die "Can't open '$texfile' $!\n";

my $paper = 'a4paper';

if ($locale=~/en-US/)
{
   $paper = 'letterpaper';
}

print TEXFD <<_END_PREAMBLE;
\\documentclass[$paper]{$base}

\\usepackage[$inputenc]{inputenc}
\\usepackage[$fontenc]{fontenc}
\\usepackage{graphicx}
\\usepackage[colorlinks]{hyperref}

_END_PREAMBLE

print TEXFD "\\title{", &texfmt($title), "}\n";
print TEXFD "\\author{", &texfmt($author), "}\n";
print TEXFD "\\date{", &texfmt($date), "}\n";

print TEXFD "\\begin{document}\n", "\\maketitle\n";


print TEXFD "\\end{document}\n";
close TEXFD;

sub texfmt{
   my $string = shift;

print ">>", $string, "\n";

   $string
}

1;
