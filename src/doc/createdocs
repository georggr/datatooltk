#!/usr/bin/perl -w
# File   : createdocs
# Author : Nicola L. C. Talbot
# Date   : 2013-06-06

use strict;
use XML::XPath;

if ($#ARGV > 1 || $#ARGV < 0)
{
   die "Syntax: $0 <lang> [<region>]\n";
}

my $dictdir = '../resources/dictionaries';
my $mainclass = '../java/DatatoolTk.java';
my $base = 'datatooltk';

# mapping between xml encoding names and inputenc options

my %inputenc = 
 (
    'utf-8' => 'utf8',
    'ios-8859-1' => 'latin1'
 );

# default
my $encoding = 'utf-8';

# mapping between locales and babel options

my %babel =
 (
    'en'    => 'english',
    'en-GB' => 'british',
    'en-US' => 'american',
    'fr'    => 'frenchb'
 );

my %specialchars =
 (
    '&'  => '\\ampersand ',
    '~'  => '\\textasciitilde ',
    '^'  => '\\textasciicircum ',
    "\\" => '\\textbackslash ',
    '{'  => '\\leftbrace ',
    '}'  => '\\rightbrace ',
    '_'  => '\\underscore ',
    '%'  => '\\textpercent ',
    '#'  => '\\texthash ',
    '$'  => '\\textdollar '
 );

my %textags =
 (
    'br'   => "\\\\",
    'hr'   => "\\hrulefill "
 );

my %sectionunits =
 (
   'chapter'       => 'h1',
   'section'       => 'h2',
   'subsection'    => 'h3',
   'subsubsection' => 'h4',
   'paragraph'     => 'h5',
   'acronyms'      => 'h1',
   'index'         => 'h1'
 );

my $lang = $ARGV[0];

my $locale = $lang;

if ($#ARGV == 1)
{
  $locale .= "-".$ARGV[1];
}

open FD, "$mainclass" or die "Can't open '$mainclass' $!\n";
binmode(FD, ":utf8");

my %dict = ();

while (<FD>)
{
   if (/public +static +final +String +appName *= *"([^"]+)"/)
   {
      $dict{appname} = $1;
   }
   elsif (/public +static +final +String +appVersion *= *"([^"]+)"/)
   {
      $dict{appversion} = $1;
   }
   elsif (/public +static +final +String +appDate *= *"([^"]+)"/)
   {
      $dict{appdate} = $1;
   }
}

close FD;

my $propfile = "$dictdir/$base-$locale.prop";

if (not (-e $propfile) and ($lang ne $locale))
{
   $propfile = "$dictdir/$base-$lang.prop";

   unless (-e $propfile)
   {
      die "Can't find either '$dictdir/$base-$locale.prop' or '$propfile'\n";
   }
}

unless (-e $propfile)
{
   die "Can't find '$propfile'\n";
}

open FD, "$propfile" or die "Can't open '$propfile' $!\n";
binmode(FD, ":utf8");

my $linenum = 0;

while (<FD>)
{
   $linenum++;

   next if (/^ *#/ or /^ *$/);

   if (/^([^=]+)=(.*)$/)
   {
      $dict{$1} = $2;
   }
   else
   {
      warn "$propfile: Can't parse line $linenum\n";
   }
}

close FD;

my $xmlfile = "$base-$locale.xml";

if (not (-e $xmlfile) and ($lang ne $locale))
{
   $xmlfile = "$base-$lang.xml";

   unless (-e $xmlfile)
   {
      die "Can't find either '$base-$locale.xml' or '$xmlfile'\n";
   }
}

unless (-e $xmlfile)
{
   die "Can't find '$xmlfile'\n";
}

my $texfile = "$base-$locale.tex";
my $helpsetdir = "$dictdir/helpset-$locale";

unless (-e $helpsetdir)
{
   mkdir $helpsetdir or die "Can't mkdir '$helpsetdir' $!\n";
}

unless (-d $helpsetdir)
{
   die "'$helpsetdir' is not a directory\n";
}

my $xp = XML::XPath->new(filename=>$xmlfile);

# TODO work out how to get the xml encoding from $xp

my $inputenc = $inputenc{$encoding} ? $inputenc{$encoding} : $encoding;

my $nodeset = $xp->find('//newacro');

my %acros = ();

foreach my $element ($nodeset->get_nodelist)
{
   my $label = $element->string_value;

   $acros{$label}->{Long} = $element->getAttribute('long');
   $acros{$label}->{Short} = $element->getAttribute('short');

   unless ($acros{$label}->{Short})
   {
      warn "Acronym '$label' missing 'short' attribute\n";
   }

   unless ($acros{$label}->{Long})
   {
      warn "Acronym '$label' missing 'long' attribute\n";
   }
}

my @tags = ();

my %nodes = ();

$nodeset = $xp->find('//node');

foreach my $element ($nodeset->get_nodelist)
{
   my $tag = $element->getAttribute('tag');
   my $type = $element->getAttribute('type');
   my $title = $element->getAttribute('title');

   push @tags, $tag;

   $nodes{$tag}->{Type}  = $type;
   $nodes{$tag}->{Title} = $title;
   $nodes{$tag}->{Element} = $element;
}

my %counters = ();

my @floattags = ();

my %floats = ();

$nodeset = $xp->find('//float');

foreach my $element ($nodeset->get_nodelist)
{
   my $tag     = $element->getAttribute('tag');
   my $type    = $element->getAttribute('type');
   my $caption = $element->getAttribute('caption');

   unless ($tag)
   {
      warn "Missing tag in float\n";
   }

   unless ($type)
   {
      warn "Missing type in float\n";
   }

   unless ($caption)
   {
      warn "Missing caption in float\n";
   }

   push @floattags, $tag;

   $floats{$tag}->{Type}    = $type;
   $floats{$tag}->{Caption} = $caption;
   $floats{$tag}->{Element} = $element;

   if ($counters{$type})
   {
      $counters{$type}++;
   }
   else
   {
      $counters{$type} = 1;
   }

   $floats{$tag}->{Number} = $counters{$type};

   $floats{$tag}->{Parent} = $element->getParentNode->getAttribute("tag");
}

$nodeset = $xp->find('//fontenc');

my $fontenc = 'T1';

if (my @nodelist = $nodeset->get_nodelist)
{
   if ($#nodelist != 0)
   {
      warn "Only one <fontenc> permitted\n";
   }

   $fontenc = $nodelist[0]->string_value;
}

my $title;

$nodeset = $xp->find('//title');

if (my @nodelist = $nodeset->get_nodelist)
{
   if ($#nodelist != 0)
   {
      warn "Only one <title> permitted\n";
   }

   $title = $nodelist[0];
}

$nodeset = $xp->find('//author');

my @authors =  $nodeset->get_nodelist;

my @texauthors = ();

foreach my $element (@authors)
{
   push @texauthors, &texfmt($element->toString);
}

my $date;

$nodeset = $xp->find('//date');

if (my @nodelist = $nodeset->get_nodelist)
{
   if ($#nodelist != 0)
   {
      warn "Only one <date> permitted\n";
   }

   $date = $nodelist[0];
}

open HTMLFD, ">$helpsetdir/$base.html" 
  or die "Can't open '$helpsetdir/$base.html'";
binmode(HTMLFD, ":$inputenc");

my $htmltitle = &htmlfmt($title->toString);

print HTMLFD <<_END_HEAD;
<!doctype html public "-//w3c//dtd xhtml 1.0 Transitional//$lang"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
>
<html xmlns="http://www.w3.org/1999/xhtml" lang="$locale" xml:lang="$locale">
<head>
  <title>$htmltitle</title>
  <meta http-equiv="Content-Type" content="text/html; charset=$encoding" />
  <link rel="next" href="$tags[0].html" />
</head>
<body>
&nbsp;<div style="float: right;">
<a href="$tags[0].html">Next</a>
</div>
<h1>$htmltitle</h1>
_END_HEAD

foreach my $element (@authors)
{
   print HTMLFD 
    "<div style=\"display: inline;\">",
    &htmlfmt($element->toString),
    "</div>\n";
}

print HTMLFD "</body>\n</html>\n";

close HTMLFD;

my $prev = $base;

for (my $idx=0; $idx<=$#tags; $idx++)
{
   my $tag = $tags[$idx];

   my $htmltitle = &htmlfmt($nodes{$tag}->{Title});

   my $next;
   my $nextlink = '';

   if ($idx< $#tags)
   {
      $next = $tags[$idx+1];
      $nextlink = "<link rel=\"next\" href=\"$next.html\" />";
   }

   open HTMLFD, ">$helpsetdir/$tag.html" 
     or die "Can't open '$helpsetdir/$tag.html'";
   binmode(HTMLFD, ":$inputenc");

   print HTMLFD <<_END_HEAD;
<!doctype html public "-//w3c//dtd xhtml 1.0 Transitional//$lang"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
>
<html xmlns="http://www.w3.org/1999/xhtml" lang="$locale" xml:lang="$locale">
<head>
  <title>$htmltitle</title>
  <meta http-equiv="Content-Type" content="text/html; charset=$encoding" />
  <link rel="prev" href="$prev.html" />
  $nextlink
<body>
_END_HEAD

my $nav = <<_END_NAV;
<div style="float: left">
<a href="$prev.html">Prev</a>
</div>&nbsp;
_END_NAV

   if ($next)
   {
      $nav .= <<_END_NEXT;
<div style="float: right">
<a href="$next.html">Next</a>
</div>
_END_NEXT
   }

   print HTMLFD "$nav<div>\n";

   my $level = $sectionunits{$nodes{$tag}->{Type}};

   if ($level)
   {
      print HTMLFD "<$level>$htmltitle</$level>";
   }
   else
   {
      warn "Can't find level for sectional unit '",
         $nodes{$tag}->{Type}, "'\n";
      print HTMLFD "<h1>$htmltitle</h1>";
   }

   my $text = $nodes{$tag}->{Element}->toString;

   my $footnotenum = 1;
   my $footnotes = '';

   while ($text=~s/<footnote>(.+?)<\/footnote>/<sup><a href="#$footnotenum">$footnotenum<\/a><\/sup>/sg)
   {
      $footnotes .= "<p><sup><a name=\"fn$footnotenum\">$footnotenum</a></sup> $1</p>";

      $footnotenum++;
   }

   print HTMLFD &htmlfmt($text);

   print HTMLFD "</div>";

   if ($footnotes)
   {
      print HTMLFD "<hr />", $footnotes;
   }

   print HTMLFD "$nav</body>\n</html>\n";

   close HTMLFD;

   $prev = $tag;
}

open TEXFD, ">$texfile" or die "Can't open '$texfile' $!\n";
binmode(TEXFD, ":$inputenc");

my $paper = 'a4paper';

if ($locale=~/en-US/)
{
   $paper = 'letterpaper';
}

print TEXFD <<_END_PREAMBLE;
% arara: pdflatex
% arara: makeglossaries
% arara: makeindex
% arara: pdflatex
% arara: pdflatex
\\documentclass[$paper,index=totoc]{$base}

\\usepackage[$inputenc]{inputenc}
\\usepackage[$fontenc]{fontenc}
\\usepackage{graphicx}
\\usepackage{makeidx}
\\usepackage[colorlinks]{hyperref}
\\usepackage[acronym,toc]{glossaries}

\\makeindex
\\makeglossaries

_END_PREAMBLE

foreach my $label (keys %acros)
{
   print TEXFD "\\newacronym{$label}{", 
    $acros{$label}->{Short}, "}{",
    $acros{$label}->{Long}, "}\n";
}

print TEXFD "\\title{", &texfmt($title->toString), "}\n" if ($title);
print TEXFD "\\author{", join('\\and ', @texauthors), "}\n";
print TEXFD "\\date{", &texfmt($date->toString), "}\n";

print TEXFD "\\begin{document}\n", "\\maketitle\n\\tableofcontents\n";

foreach my $tag (@tags)
{
   my $element = $nodes{$tag}->{Element};

   if ($nodes{$tag}->{Type}=~/(section|chapter)/)
   {
      print TEXFD "\\", $nodes{$tag}->{Type},
        "{", &texfmt($nodes{$tag}->{Title}), "}\n";
      print TEXFD "\\label{$tag}\n";
   }

   print TEXFD &texfmt($nodes{$tag}->{Element}->toString), "\n";
}

print TEXFD "\\end{document}\n";
close TEXFD;

sub htmlfmt{
   my $string = shift;

   $string=~s/<dict>(.+?)<\/dict>/$dict{$1}/g;

   $string=~s/<\/?(author|title|xcs|cs)>//g;

   $string=~s/<sty>(.+?)<\/sty>/<tt>$1<\/tt>/g;

   $string=~s/<acr>(.+?)<\/acr>/&htmlacr($1)/eg;

   $string=~s/<menu>(.+?)<\/menu>/&htmlmenu($1)/eg;

   $string=~s/<url>(.+?)<\/url>/&htmlurl($1)/eg;

   $string=~s/<ref>(.+?)<\/ref>/&htmlref($1)/eg;

   $string=~s/<opt>(.+?)<\/opt>/&htmlopt($1)/eg;

   $string
}

sub htmlopt{
   my $opt = shift;

# TODO index it

   "<tt>--$opt</tt>"
}

sub htmlref{
   my $tag = shift;
   my $text = $tag;

   if ($nodes{$tag})
   {
      $text = "<a href=\"$tag.html\">" 
            . $nodes{$tag}->{Title}
            . "</a>";
   }
   elsif ($floats{$tag})
   {
      $text = "<a href=\"". $floats{$tag}->{Parent}.".html#$tag\">"
            . $dict{figure} . "&nbsp;" . $floats{$tag}->{Number}
            . "</a>";
   }
   else
   {
      warn "Unknown tag '$tag'\n";
   }

   $text
}

sub htmlacr{
   my $acr = shift;

   if (not $acros{$acr})
   {
      warn "Unknown acronym '$acr'\n";
   }
   elsif ($acros{$acr}->{Used})
   {
      $acr = $acros{$acr}->{Short};
   }
   else
   {
      $acros{$acr}->{Used} = 1;

      $acr = $acros{$acr}->{Long}
           . ' (' . $acros{$acr}->{Short} . ')';
   }

   $acr
}

sub htmlmenu{
   my $label = shift;

   my $menu;
   my $currentlabel;

   foreach my $item (split /\./, $label)
   {
      if ($currentlabel)
      {
         $currentlabel .= ".$item";
         $menu .= '-&gt;';
      }
      else
      {
         $currentlabel = $item;
         $menu = '';
      }

      if ($dict{$currentlabel})
      {
         $menu .= $dict{$currentlabel};
      }
      else
      {
         warn "Unknown dictionary tag '$currentlabel'\n";
         $menu .= $currentlabel;
      }
   }

   "<em>$menu</em>"
}

sub texfmt{
   my $string = shift;

   $string=~s/<dict>(.+?)<\/dict>/$dict{$1}/g;

   $string=~s/<acr>(.+?)<\/acr>/\\gls\{$1\}/g;

   $string=~s/<opt>(.+?)<\/opt>/\\opt\{$1\}/g;

   $string=~s/<ref>(.+?)<\/ref>/\\autoref\{$1\}/g;

   if ($string=~/<cs>printacronyms<\/cs>/)
   {
      if ($nodes{acronyms}->{Title})
      {
         $string=~s/<cs>printacronyms<\/cs>/\\printglossary[type=acronym,title=\{$nodes{acronyms}->{Title}\}]/;
      }
      else
      {
         $string=~s/<cs>printacronyms<\/cs>/\\printglossary[type=acronym]/;
      }
   }

   $string=~s/<menu>(.+?)<\/menu>/&texmenu($1)/eg;

   $string=~s/<url>(.+?)<\/url>/\\url\{$1\}/g;

   $string=~s/<footnote>(.+?)<\/footnote>/\\footnote\{$1\}/sg;

   $string=~s/<cs>(.+?)<\/cs>/\\$1/g;

   $string=~s/<xcs>(.+?)<\/xcs>/\\$1\{\}/g;

   $string=~s/<tt>(.+?)<\/tt>/\\texttt\{$1\}/sg;

   $string=~s/<b>(.+?)<\/b>/\\textbf\{$1\}/sg;

   $string=~s/<em>(.+?)<\/em>/\\emph\{$1\}/sg;

   $string=~s/<i>(.+?)<\/i>/\\emph\{$1\}/sg;

   $string=~s/<\/?p>/\n\n/g;

   $string=~s/(<image.*>.+?<\/image>)/&teximage($1)/eg;

   $string=~s/(<float[^>]*>.+?<\/float>)/&texfloat($1)/seg;

   $string=~s/<([a-z]+) *\/>/&textag($1)/eg;

   $string=~s/\xa0/~/g;

   # remove any remaining tags

   $string=~s/<\/?[^>]+>//g;

   $string
}

sub textag{
   my $tag = shift;

   ($textags{$tag} ? $textags{$tag} : '')
}

sub teximage{
   my $xml = shift;

   $xml=~/<image\s*(.*)\s*>(.+)<\/image>/;

   my $opts = $1;
   my $imgFile=$2;

   unless (-e $imgFile)
   {
      warn "Can't find '$imgFile'\n";
      return "";
   }

   if ($opts)
   {
      $opts=~s/alt="[^"]+"//;

      $opts=~tr/ +/,/;
      $opts=~tr/"//;
   }

   "\\includegraphics[$opts]{$imgFile}";
}

sub texfloat{
   my $xml = shift;

   my $contents = '';
   my $tag;

   if ($xml=~/<float.*? tag="([^"]+)".*?>(.*)<\/float>/s)
   {
      $tag = $1;
      $contents = $2;

      my $caption = $floats{$tag}->{Caption};
      my $type = $floats{$tag}->{Type};

      $contents = "\\begin{$type}"
                . "\\floatconts{$tag}{\\caption{$caption}}{$contents}"
                . "\\end{$type}";
   }

   $contents
}

sub texmenu{
   my $label = shift;

   my @items = split /\./, $label;

   my $text  = '';
   my $index = '';

   my $currentlabel;

   foreach my $item (@items)
   {
      if ($currentlabel)
      {
         $currentlabel .= ".$item";
         $text .= "\\mto ";
         $index .= "!";
      }
      else
      {
         $currentlabel = $item;
      }

      my $word;

      if ($dict{$currentlabel})
      {
         $word = $dict{$currentlabel};
      }
      else
      {
         warn "Undefined dictionary tag '$currentlabel'\n";
         $word = $item;
      }

      $text .= "\\menu{$word}";

      $word=~s/(["@|!])/"$1/g;
      $index .= "$word\@\\menu{$word}";
   }

   "$text\\index{$index}";
}

sub htmlurl{
   my $url = shift;
   my $text = $url;

   unless ($url=~/^[a-z]+:\/\//)
   {
      $url = "http://$url";
   }

   "<a href=\"$url\"><tt>$text</tt></a>";
}

1;
