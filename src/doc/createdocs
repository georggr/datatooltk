#!/usr/bin/perl -w

use strict;
use XML::Parser;

if ($#ARGV > 1 || $#ARGV < 0)
{
   die "Syntax: $0 <lang> [<region>]\n";
}

my $dictdir = '../resources/dictionaries';
my $mainclass = '../java/DatatoolTk.java';
my $base = 'datatooltk';

my $fontenc = 'T1';

# mapping between locales and babel options

my %babel =
 (
    'en'    => 'english',
    'en-GB' => 'british',
    'en-US' => 'american',
    'fr'    => 'frenchb'
 );

my $lang = $ARGV[0];

my $locale = $lang;

if ($#ARGV == 1)
{
  $locale .= "-".$ARGV[1];
}

open FD, "$mainclass" or die "Can't open '$mainclass' $!\n";
binmode(FD, ":utf8");

my %dict = ();

while (<FD>)
{
   if (/public +static +final +String +appName *= *"([^"]+)"/)
   {
      $dict{appname} = $1;
   }
   elsif (/public +static +final +String +appVersion *= *"([^"]+)"/)
   {
      $dict{appversion} = $1;
   }
   elsif (/public +static +final +String +appDate *= *"([^"]+)"/)
   {
      $dict{appdate} = $1;
   }
}

close FD;

my $propfile = "$dictdir/$base-$locale.prop";

if (not (-e $propfile) and ($lang ne $locale))
{
   $propfile = "$dictdir/$base-$lang.prop";

   unless (-e $propfile)
   {
      die "Can't find either '$dictdir/$base-$locale.prop' or
'$propfile'\n";
   }
}

unless (-e $propfile)
{
   die "Can't find '$propfile'\n";
}

open FD, "$propfile" or die "Can't open '$propfile' $!\n";
binmode(FD, ":utf8");

my $linenum = 0;

while (<FD>)
{
   $linenum++;

   next if (/^ *#/ or /^ *$/);

   if (/^([^=]+)=(.*)$/)
   {
      $dict{$1} = $2;
   }
   else
   {
      warn "$propfile: Can't parse line $linenum\n";
   }
}

close FD;

my %docinfo = ();
my @nodes   = ();
my @current = ();
my %tags    = ();

my $xmlfile = "$base-$locale.xml";

if (not (-e $xmlfile) and ($lang ne $locale))
{
   $xmlfile = "$base-$lang.xml";

   unless (-e $xmlfile)
   {
      die "Can't find either '$base-$locale.xml' or '$xmlfile'\n";
   }
}

unless (-e $xmlfile)
{
   die "Can't find '$xmlfile'\n";
}

my $texfile = "$base-$locale.tex";
my $helpsetdir = "$dictdir/helpset-$locale";

unless (-e $helpsetdir)
{
   mkdir $helpsetdir or die "Can't mkdir '$helpsetdir' $!\n";
}

unless (-d $helpsetdir)
{
   die "'$helpsetdir' is not a directory\n";
}

# Is there any way of querying the input encoding picked up by
# XML::Parser? Let's just stick to utf8
my $inputenc = 'utf8';
 
use XML::Parser;

my %section_levels =
(
   'chapter'       => 'h1',
   'section'       => 'h2',
   'subsection'    => 'h3',
   'subsubsection' => 'h4',
   'paragraph'     => 'h5'
);

my %acros = ();

my @float_elements = ();

my %counters = ();

# open the TeX file
open TEXFD, ">$texfile" or die "Can't open '$texfile' $!\n";
 
# initialize the parser
my $parser = XML::Parser->new( Handlers => 
                                     {
                                      Start=>\&handle_start,
                                      End=>\&handle_end,
                                      Char=>\&handle_char
                                     });
$parser->parsefile( $xmlfile );
 
close TEXFD;

open HTMLFD, ">$helpsetdir/$base.html"
  or die "Can't open '$helpsetdir/$base.html' $!\n";
binmode(HTMLFD, ":utf8");

print HTMLFD &html_head($docinfo{Title}, '', $nodes[0]->{Tag});

print HTMLFD "<body>\n";

print HTMLFD 
   "<div class=\"title\" \"><p>",
   $docinfo{Title}, "</p>\n";

print HTMLFD "<p>$docinfo{Author}</p>\n" if ($docinfo{Author});

print HTMLFD "</div><div class=\"date\">";

print HTMLFD "<p>$docinfo{Date}</p>\n" if ($docinfo{Date});

print HTMLFD "</div>";

print HTMLFD &html_nav('', $nodes[0]->{Tag});

print HTMLFD "</body>\n</html>\n";

close HTMLFD;

my $prev = $base;

for (my $idx = 0; $idx <= $#nodes; $idx++)
{
   my $node = $nodes[$idx];

   my $next = ($idx == $#nodes ? '' : $nodes[$idx+1]->{Tag});

   my $tag = $node->{Tag};

   open HTMLFD, ">$helpsetdir/$tag.html"
     or die "Can't open '$helpsetdir/$tag.html' $!\n";

   binmode(HTMLFD, ":utf8");

   print HTMLFD &html_head($node->{Title}, $prev, $next);

   print HTMLFD "<body>\n";

   my $header = $section_levels{$node->{Type}};

   print HTMLFD "<$header>", $node->{Title}, "</$header>\n";

   my $content = $node->{Contents};

   $content=~s/<ref>([^<]+)<\/ref>/&get_ref($1)/eg;

   print HTMLFD "<div>$content</div>";

   if ($node->{Footnotes})
   {
      $content = $node->{Footnotes};

      $content=~s/<ref>([^<]+)<\/ref>/&get_ref($1)/eg;

      print HTMLFD "<hr />$content";
   }

   print HTMLFD &html_nav($prev, $next);

   print HTMLFD "</body>\n</html>\n";

   close HTMLFD;

   $prev = $tag;
}

sub handle_char{
   my( $expat, $string ) = @_;

   &handle_html($string);

   print TEXFD $string;
}

sub handle_html{
   my ($string) = @_;

   if ($#current > -1)
   {
      my $element = $current[$#current];

      $docinfo{$element} .= $string;
   }
   elsif ($#nodes > -1)
   {
      $nodes[$#nodes]->{Contents} .= $string;
   }
}
 
sub handle_start {
    my( $expat, $element, %attrs ) = @_;

    my $sub = "start_$element";
 
    if (defined(&$sub))
    {
       {
         no strict 'refs';
         &$sub($expat, %attrs);
       }
    }
    else
    {
       die "Don't know what to do with '<$element>'\n";
    }
}

sub handle_end {
    my( $expat, $element ) = @_;
 
    my $sub = "end_$element";

    if (defined(&$sub))
    {
       {
         no strict 'refs';
         &$sub($expat);
       }
    }
    else
    {
       die "Don't know what to do with '</$element>'\n";
    }
}

sub get_ref{
   my ($tag) = @_;

   unless ($tags{$tag})
   {
      die "Unknown tag '$tag'\n";
   }

   my $ref = $tags{$tag}->{Ref};
   my $text = $tags{$tag}->{Text};

   "<a href=\"$ref\">$text</a>";
}

sub get_label{
   my ($tag, $attrs, $expat) = @_;

   unless ($dict{$tag})
   {
      if ($expat)
      {
         die "No dictionary entry for tag '$tag' on line ",
           $expat->current_line, "\n";
      }
      else
      {
         die "No dictionary entry for tag '$tag'\n";
      }
   }

   my $text = $dict{$tag};

   if ($attrs)
   {
      $text=~s/\$(\d)/$attrs->{"arg$1"}/eg;
   }

   $text
}

sub start_manual{
   my ($expat, %attrs) = @_;

   if ($attrs{fontenc})
   {
      $fontenc = $attrs{'fontenc'};
   }

   print TEXFD "% arara: pdflatex\n";
   print TEXFD "% arara: makeglossaries\n";
   print TEXFD "% arara: pdflatex\n";
   print TEXFD "% arara: makeindex\n";
   print TEXFD "% arara: pdflatex\n";
   print TEXFD "\\documentclass[index=totoc]{datatooltk}\n";
}

sub end_manual{
   my ($expat) = @_;
}

sub start_preamble{
   my ($expat, %attrs) = @_;

   print TEXFD "\\usepackage[$inputenc]{inputenc}\n",
      "\\usepackage[$fontenc]{fontenc}\n",
      "\\usepackage{graphicx}\n",
      "\\usepackage{makeidx}\n",
      "\\usepackage[colorlinks]{hyperref}\n",
      "\\usepackage[acronym,toc]{glossaries}\n",
      "\\makeglossaries\n\\makeindex\n";
}
 
sub end_preamble{
   my ($expat) = @_;
}

sub start_title{
   my ($expat, %attrs) = @_;

   push @current, 'Title';

   print TEXFD "\\title{";
}

sub end_title{
   my ($expat) = @_;

   pop @current;

   print TEXFD "}\n";
}

sub start_date{
   my ($expat, %attrs) = @_;

   push @current, 'Date';

   print TEXFD "\\date{";
}

sub end_date{
   my ($expat) = @_;

   pop @current;

   print TEXFD "}\n";
}

sub start_author{
   my ($expat, %attrs) = @_;

   push @current, 'Author';

   unless ($docinfo{Author})
   {
      $docinfo{Author} = " ";
   }

   $docinfo{Author} .= "<table class=\"author\"><tr><td>";

   print TEXFD "\\Author{";
}

sub end_author{
   my ($expat) = @_;

   $docinfo{Author} .= "</td></tr></table>";

   pop @current;

   print TEXFD "}\n";
}

sub start_document{
   my ($expat, %attrs) = @_;

   print TEXFD "\\begin{document}\n\\maketitle\n";
}

sub end_document{
   my ($expat) = @_;

   print TEXFD "\\end{document}\n";
}

sub start_node{
   my ($expat, %attrs) = @_;

   unless ($attrs{type})
   {
      die "Missing 'type' attribute for element 'node' on line ",
         $expat->current_line, "\n";
   }

   unless ($attrs{tag})
   {
      die "Missing 'tag' attribute for element 'node' on line ",
         $expat->current_line, "\n";
   }

   unless ($attrs{title})
   {
      die "Missing 'title' attribute for element 'node' on line ",
         $expat->current_line, "\n";
   }

   unless ($section_levels{$attrs{type}})
   {
      die "Unknown section level '$attrs{type}' on line ",
         $expat->current_line, "\n";
   }

   my %node = 
   (
      Type      => $attrs{type},
      Title     => $attrs{title},
      Tag       => $attrs{tag},
      Contents  => '',
      Footnotes => '' 
   );

   push @nodes, \%node;

   $tags{$attrs{tag}}->{Ref} = $attrs{tag}.'.html';
   $tags{$attrs{tag}}->{Text} = $attrs{title};

   print TEXFD "\\", $attrs{type}, "{",
      $attrs{title}, "}\\label{",
      $attrs{tag}, "}\n";
}

sub end_node{
   my ($expat) = @_;

}

sub start_newacro{
   my ($expat, %attrs) = @_;

   unless ($attrs{tag})
   {
      die "Missing 'tag' attribute for element 'newacro' on line ",
         $expat->current_line, "\n";
   }

   unless ($attrs{short})
   {
      die "Missing 'short' attribute for element 'newacro' on line ",
         $expat->current_line, "\n";
   }

   unless ($attrs{long})
   {
      die "Missing 'long' attribute for element 'newacro' on line ",
         $expat->current_line, "\n";
   }

   my $tag = $attrs{tag};

   if ($acros{$tag})
   {
      die "Acronym '$tag' already defined\n";
   }

   $acros{$tag}->{Short} = $attrs{short};
   $acros{$tag}->{Long} = $attrs{long};

   print TEXFD "\\newacronym{$tag}{$attrs{short}}{$attrs{long}}\n";
}

sub end_newacro{
   my ($expat) = @_;
}
 
sub start_p{
   my ($expat, %attrs) = @_;

   &handle_html("<p>");

   print TEXFD "\n\n";
}

sub end_p{
   my ($expat) = @_;

   &handle_html("</p>");

   print TEXFD "\n\n";
}

sub start_tt{
   my ($expat, %attrs) = @_;

   &handle_html("<tt>");

   print TEXFD "\\texttt{";
}

sub end_tt{
   my ($expat) = @_;

   &handle_html('</tt>');

   print TEXFD "}";
}

sub start_url{
   my ($expat, %attrs) = @_;

   unless ($attrs{www})
   {
      die "element 'url' missing 'www' attribute\n";
   }

   my $string;

   my $uri = $attrs{www};

   $uri = "http://$uri" unless ($uri=~/^[a-z]+:\/\//);

   if ($attrs{text})
   {
      print TEXFD "\\href{", $attrs{text}, "}{", $attrs{www}, "}";
      $string = "<a href=\"$uri\">$attrs{text}</a>";
   }
   else
   {
      print TEXFD "\\url{", $attrs{www}, "}";
      $string = "<a href=\"$uri\"><tt>$attrs{www}</tt></a>";
   }

   &handle_html($string);
}

sub end_url{
   my ($expat) = @_;
}

sub start_sty{
   my ($expat, %attrs) = @_;

   &handle_html('<tt>');

   print TEXFD "\\sty{";
}

sub end_sty{
   my ($expat) = @_;

   &handle_html('</tt>');

   print TEXFD "}";
}

sub start_footnote{
   my ($expat, %attrs) = @_;

   if ($counters{footnote})
   {
      $counters{footnote} = 1;
   }
   else
   {
      $counters{footnote}++;
   }

   $nodes[$#nodes]->{Contents} .=
     "<sup><a href=\"#fn-$counters{footnote}\">$counters{footnote}</a></sup>";

   push @current, 'Footnote';

   print TEXFD "\\footnote{";
}

sub end_footnote{
   my ($expat) = @_;

   pop @current;

   $nodes[$#nodes]->{Footnotes} .=
     "<p><sup><a name=\"fn-$counters{footnote}\">$counters{footnote}</a></sup>"
     . $docinfo{Footnote}
     . '</p>';

   $docinfo{Footnote} = '';

   print TEXFD "}";
}

sub start_pre{
   my ($expat, %attrs) = @_;

   &handle_html('<pre>');

   print TEXFD "\\begin{verbatim}";
}

sub end_pre{
   my ($expat) = @_;

   &handle_html('</pre>');

   print TEXFD "\\end{verbatim}";
}

sub start_float{
   my ($expat, %attrs) = @_;

   unless ($attrs{type})
   {
      die "Element 'float' missing 'type' attribute on line ",
        $expat->current_line, "\n";
   }

   unless ($attrs{tag})
   {
      die "Element 'float' missing 'tag' attribute on line ",
        $expat->current_line, "\n";
   }

   unless ($attrs{caption})
   {
      die "Element 'float' missing 'caption' attribute on line ",
        $expat->current_line, "\n";
   }

   if ($counters{$attrs{type}})
   {
      $counters{$attrs{type}}++;
   }
   else
   {
      $counters{$attrs{type}} = 1;
   }

   $attrs{counter} = $counters{$attrs{type}};

   push @float_elements, \%attrs;

   &handle_html("<div class=\"float\"><a name=\"$attrs{tag}\"></a>");

   $tags{$attrs{tag}}->{Ref} = $nodes[$#nodes]->{Tag}
     .'.html#'.$attrs{tag};
   $tags{$attrs{tag}}->{Text} = ucfirst(&get_label($attrs{type}))
        . '&nbsp;' . $attrs{counter};

   unless ($attrs{type} eq 'figure')
   {
      &handle_html('<p>' . $tags{$attrs{tag}}->{Text} . ': '
        . $attrs{caption} . '</p>');
   }

   print TEXFD "\\begin{", $attrs{type}, "}\n";
   print TEXFD "\\floatconts{", $attrs{tag}, "}{\\caption";

   if ($attrs{listcaption})
   {
      print TEXFD "[", $attrs{listcaption}, "]";
   }

   print TEXFD "{", $attrs{caption}, "}}{";
}

sub end_float{
   my ($expat) = @_;

   my $attrs = pop @float_elements;

   if ($attrs->{type} eq 'figure')
   {
      &handle_html('<p>'. $tags{$attrs->{tag}}->{Text} . ': '
        . $attrs->{caption} . '</p>');
   }

   &handle_html('</div>');

   print TEXFD "}%\n\\end{", $attrs->{type}, "}\n";
}

sub start_nbsp{
   my ($expat, %attrs) = @_;

   &handle_html('&nbsp;');

   print TEXFD "~";
}

sub end_nbsp{
   my ($expat) = @_;
}

sub start_image{
   my ($expat, %attrs) = @_;

   unless ($attrs{src})
   {
      die "Missing 'image' element's 'src' attribute on line ",
        $expat->current_line, "\n";
   }

   my $imgfile = $attrs{src};

   unless (-e $imgfile)
   {
      die "Can't find image file '$imgfile' referenced on line ",
         $expat->current_line, "\n";
   }

   my @opts=();

   my $html = "";

   foreach my $key (keys %attrs)
   {
      if ($key eq 'scale')
      {
         push @opts, "scale=$attrs{scale}";
      }
      elsif ($key eq 'width')
      {
         push @opts, "width=$attrs{width}";
         $html .= "$key=\"$attrs{$key}\" ";
      }
      elsif ($key eq 'height')
      {
         push @opts, "height=$attrs{height}";
         $html .= "$key=\"$attrs{$key}\" ";
      }
      else
      {
         $html .= "$key=\"$attrs{$key}\" ";
      }
   }

   if (not $attrs{width} or not $attrs{height})
   {
      # get image dimensions

      $_ = `file $imgfile`;

      if (/(\d+) x (\d+)/)
      {
         $html .= "width=\"$1\" " unless $attrs{width};
         $html .= "height=\"$2\" " unless $attrs{height};
      }
      else
      {
         warn "Can't determine dimensions of image '$imgfile'\n";
      }
   }

   $html = "<img $html />";

   &handle_html($html);

   print TEXFD "\\includegraphics[",
     join(',', @opts), "]{$imgfile}";
}

sub end_image{
   my ($expat) = @_;
}

sub start_LaTeX{
   my ($expat, %attrs) = @_;

   &handle_html('LaTeX');

   print TEXFD "\\LaTeX{}";
}

sub end_LaTeX{
   my ($expat) = @_;
}

sub start_dict{
   my ($expat, %attrs) = @_;

   unless ($attrs{tag})
   {
      die "Missing 'dict' element's 'tag' attribute on line ",
        $expat->current_line, "\n";
   }

   my $text = &get_label($attrs{tag}, \%attrs, $expat);

   &handle_html($text);

   print TEXFD $text;
}

sub end_dict{
   my ($expat) = @_;
}
 
sub start_menu{
   my ($expat, %attrs) = @_;

   unless ($attrs{tag})
   {
      die "Missing 'menu' element's 'tag' attribute on line ",
        $expat->current_line, "\n";
   }

   my $currentlabel;
   my $index = '';
   my $html  = '';

   foreach my $item (split /\./, $attrs{tag})
   {
      if ($currentlabel)
      {
         $currentlabel .= ".$item";
         print TEXFD "\\mto ";
         $index .= '!';
         $html .= '-&gt;';
      }
      else
      {
         $currentlabel = $item;
      }

      my $text = &get_label($currentlabel, \%attrs, $expat);

      $html .= $text;

      print TEXFD "\\menu{$text}";

      $text=~s/([@"!|])/"$1/g;

      $index .= "$text@\\menu{$text}";
   }

   &handle_html("<tt>$html</tt>");

   print TEXFD "\\index{$index}";
}

sub end_menu{
   my ($expat) = @_;
}
 
sub start_acr{
   my ($expat, %attrs) = @_;

   unless ($attrs{tag})
   {
      die "Missing 'acr' element's 'tag' attribute on line ",
        $expat->current_line, "\n";
   }

   unless ($acros{$attrs{tag}})
   {
      die "Unknown acronym tag '$attrs{tag}' on line ",
         $expat->current_line, "\n";
   }

   my $html;

   if ($acros{$attrs{tag}}->{Used})
   {
      $html = $acros{$attrs{tag}}->{Short};
   }
   else
   {
      $html = $acros{$attrs{tag}}->{Long}
            . ' (' . $acros{$attrs{tag}}->{Short} . ')';
   }

   &handle_html($html);

   print TEXFD "\\gls{", $attrs{tag}, "}";
}

sub end_acr{
   my ($expat) = @_;
}
 
sub start_ref{
   my ($expat, %attrs) = @_;

   unless ($attrs{tag})
   {
      die "Missing 'ref' element's 'tag' attribute on line ",
        $expat->current_line, "\n";
   }

   &handle_html("<ref>$attrs{tag}</ref>");

   print TEXFD "\\autoref{", $attrs{tag}, "}";
}

sub end_ref{
   my ($expat) = @_;
}
 
sub start_opt{
   my ($expat, %attrs) = @_;

   unless ($attrs{tag})
   {
      die "Missing 'opt' element's 'tag' attribute on line ",
        $expat->current_line, "\n";
   }

   &handle_html("<tt>--$attrs{tag}</tt>");

   print TEXFD "\\opt{", $attrs{tag}, "}";
}

sub end_opt{
   my ($expat) = @_;
}
 
sub start_printacronyms{
   my ($expat, %attrs) = @_;

   print TEXFD "\\printglossary[type=acronym]";
}

sub end_printacronyms{
   my ($expat) = @_;
}
 
sub start_printindex{
   my ($expat, %attrs) = @_;

   print TEXFD "\\printindex ";
}

sub end_printindex{
   my ($expat) = @_;
}
 
sub start_br{
   my ($expat, %attrs) = @_;

   &handle_html("<br />");

   print TEXFD "\\\\";
}

sub end_br{
   my ($expat) = @_;
}

sub start_hr{
   my ($expat, %attrs) = @_;

   &handle_html("<hr />");

   print TEXFD "\\hrulefill ";
}

sub end_hr{
   my ($expat) = @_;
}

sub html_head{
  my ($title, $prev, $next) = @_;

  my $head = <<_END_HTML_HEAD;
<!DOCTYPE html  html public "-//w3c//dtd xhtml 1.0 Transitional//en"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-GB"
xml:lang="en-GB">
<head>
  <style type="text/css">
    .title
    {
      display: inline;
      font-weight: bold;
      font-size: xx-large;
      text-align: center;
    }
    .author
    {
      display: inline;
      font-weight: bold;
      font-size: large;
      text-align: center;
      padding: 2em;
    }
    .date
    {
      display: inline;
      font-weight: bold;
      font-size: normal;
      text-align: center;
    }
    .float
    {
       text-align: center;
    }
  </style>
  <title>$title</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
_END_HTML_HEAD

  if ($next)
  {
     $head .= "<link rel=\"next\" href=\"$next.html\" />";
  }

  if ($prev)
  {
     $head .= "<link rel=\"prev\" href=\"$prev.html\" />";
  }

  "$head</head>";
}

sub html_nav{
  my ($prev, $next) = @_;

  my $nav = '<hr /><div>';

  if ($prev)
  {
     $nav .= "<div style=\"float: left;\"><a href=\"$prev.html\">"
          . &get_label('prev')
          . "</a></div>";
  }

  $nav .= "&nbsp;";

  if ($next)
  {
     $nav .= "<div style=\"float: right;\"><a href=\"$next.html\">"
          . &get_label('next')
          . "</a></div>";
  }

  "$nav</div>"
}
 
1;
