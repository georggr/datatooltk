<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE manual SYSTEM "manual.dtd">
<manual fontenc="T1">
  <preamble>
    <!-- Document Info -->
    <title>User Manual for <dict tag="appname" /> version 
      <dict tag="appversion" /></title>
    <author>Nicola L. C. Talbot<br/><url www="www.dickimaw-books.com" /></author>
    <author>Another Author<br />Affliation or URL</author>
    <author>Translated by Some One<br />Affliation or URL</author>
    <date><dict tag="appdate" /></date>
    <!-- Define Acronyms -->
    <newacro short="GUI" long="graphical user interface" tag="gui" />
    <newacro short="CSV" long="comma-separated values" tag="csv" />
    <!-- Define Terms. If a description is included it's a glossary
         term otherwise it goes in the index -->
    <newterm tag="mysql" text="MySQL" description="An open source database" />
    <newterm tag="database" text="database" />
  </preamble>
  <document>
   <node tag="introduction" type="chapter" title="Introduction">
     <p>
     This is the user manual for <dict tag="appname" />. It's still 
     under construction.
     </p>
     <p>
     The <LaTeX /> <sty>datatool</sty> package is able to save databases 
     in its own internal format. Files in this format are difficult to 
     edit, but are by far the fastest way of loading a <sty>datatool</sty> 
     <term tag="database" /> in <LaTeX />. This application provides 
     a<nbsp /><acr tag="gui" /> making it easier to edit these files. 
     It can also import data from <acr tag="csv" /> files and from 
     SQL databases. <dict tag="appname" /> can run in either 
     batch mode (see <ref tag="cli" />) or <acr tag="gui" /> mode 
     (see <ref tag="gui" />).
     </p>
   </node>
   <node tag="cli" type="section" title="Batch Mode">
    <p>
      The default invocation of <dict tag="appname" /> will be in 
      batch mode. (Although if you are importing data from a SQL 
      database and you don't specify a password using 
      <opt tag="sqlpassword" />, you will be prompted for the password.)
      You can also explicitly set it to batch mode using the
      <opt tag="batch" /> option.
    </p>
   </node>
   <node tag="gui" type="section" title="Graphical Mode">
     <p>
       To run <dict tag="appname" /> in graphical mode you must invoke it
       with the <opt tag="gui" /> option.
     </p>
     <p>
       The <acr tag="gui" /> interface is currently very primitive<footnote>It needs a lot of work on it!</footnote> 
       and doesn't allow you to do much, but let's test out 
       a<nbsp />figure here (see <ref tag="mainwindow" />).
     </p>
     <float type="figure" tag="mainwindow" caption="Main Window">
      <image alt="Image of main window" src="images/mainwindow.png" />
     </float>
     <p>
      You can use the <menu tag="file" /> to create a<nbsp />new 
      database (not yet implemented), load an existing database 
      or import data. To load an existing database, use
      <menu tag="file.open" />. To import data from a<nbsp /><acr tag="csv" /> 
      file use <menu tag="file.importcsv" />. To import data
      from a SQL database use <menu tag="file.importsql" />. (Defaults to a <term tag="mysql"/> database.)
     </p>
   </node>
   <node tag="developers" type="chapter" title="Info for Developers">
    <p>
    This chapter will be removed before release. In the <tt>tests</tt> 
    directory there's a test file <tt>data-raw.dbtex</tt> 
    (originally generated by <sty>datatool</sty>) and a test 
    document <tt>test-doc.tex</tt>, a test <acr tag="csv" />
    file and a test SQL file. The SQL file can be used to create
    a test MySQL database. The batch mode can be tested using:
<pre>
        bin/datatooltk --out tests/test-out.dbtex tests/data-raw.dbtex
        bin/datatooltk --out tests/test-csv-out.dbtex --csv tests/test.csv
</pre>
   (The first command just reads in <tt>tests/data-raw.dbtex</tt> and writes it out as <tt>tests/test-out.dbtex</tt>. The second command imports data from <tt>tests/test.csv</tt> and saves it as <tt>tests/test-csv-out.dbtex</tt>.)
  </p>
  <p>
   Once you have created the MySQL database, you can test it with:
<pre>
 bin/datatooltk --out tests/test-sql-data.dbtex \
   --sql "SELECT * FROM testsqldata" --sqldb datatooltk --sqluser datatool
</pre>
   After you have completed these steps, you can <LaTeX /> the test document <tt>test-doc.tex</tt>.
   </p>
   </node>
   <node tag="docediting" type="section" title="Editing this Document">
   <p>
   The source for this document is in XML. The Perl script 
   <tt>createdocs</tt> is used to convert the XML source into 
   <LaTeX /> and JavaHelp files. 
   </p>
   <p>
   Each sectional unit must be contained in a <tt>node</tt> element with a<nbsp /><tt>tag</tt> attribute that uniquely identifies it, a<nbsp />type attribute that identifies the sectioning level and a<nbsp />title attribute that specifies the title.
   </p>
   <p>
   Let's try out a table here (see <ref tag="tab.sample"/>).
   <float type="table" tag="tab.sample" caption="A sample table" >
    <tabular spec="lcr" >
     <tr>
      <td>
       A left aligned column.
      </td>
      <td>
       A centred column.
      </td>
      <td>
       A right aligned column.
      </td>
     </tr>
     <tr>
      <td>A</td>
      <td>B</td>
      <td>C</td>
     </tr>
     <tr>
       <td span="2" spec="c">A column spanning cell</td>
       <td>X</td>
     </tr>
    </tabular>
   </float>
   </p>
   </node>
   <printglossary />
   <printacronyms />
   <printindex />
  </document>
</manual>
