<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE manual SYSTEM "manual.dtd">
<manual fontenc="T1">
  <preamble>
    <!-- Document Info -->
    <title>User Manual for <dict tag="appname"/> version 
      <dict tag="appversion" /></title>
    <author>Nicola L. C. Talbot<br/><url www="www.dickimaw-books.com" /></author>
    <author>Another Author<br />Affliation or URL</author>
    <author>Translated by Some One<br />Affliation or URL</author>
    <date><dict tag="appdate" /></date>
    <!-- Define Acronyms -->
    <newacro short="GUI" long="graphical user interface" tag="gui" />
    <newacro short="CSV" long="comma-separated values" tag="csv" />
    <newacro short="SQL" long="structured query language" tag="sql"/>
    <!-- Define Terms. If a description is included it's a glossary
         term otherwise it goes in the index -->
    <newterm tag="mysql" text="MySQL" description="An open source SQL database" />
    <newterm tag="database" text="database" />
  </preamble>
  <document>
   <node tag="introduction" type="chapter" title="Introduction">
     <p>
     The <LaTeX /> <sty>datatool</sty> package is able to save databases 
     in its own internal format to allow for rapid loading (using
     <cs tag="DTLsaverawdb"/>).
     Files in this format are difficult to 
     edit and only a<nbsp /><TeX />pert should attempt it, but they are 
     by far the fastest way of loading a <sty>datatool</sty> 
     <term tag="database" /> in <LaTeX />. This application provides 
     a<nbsp /><acr tag="gui" /> making it easier to edit these files. 
     It can also import data from <acr tag="csv" /> files, from 
     <acr tag="sql" /> databases and from <sty>probsoln</sty> databases.
     This manual assumes the user has some knowledge of the
     <sty>datatool</sty> package.
     </p>
     <p>The <app/> 
     application can run in either 
     batch mode (default) or <acr tag="gui" /> mode (see <ref tag="gui" />).
     Command line invocation:
     </p>
     <p align="center">
      <app/> [<meta>options</meta>]
     </p>
     <p noindent="true">
     Available options:
     <dl>
       <dt><opt tag="gui"/> (or <tt>-g</tt>)</dt>
       <dd>
       Invoke <app/> in <acr tag="gui" /> mode. (The command line invocation
       <p align="center">
       <app/><tt>-gui</tt> [<meta>options</meta>] 
       </p>
       <p noindent="true">
       is equivalent to
       </p>
       <p align="center">
       <app/> <opt tag="gui"/> [<meta>options</meta>] 
       </p>
       <p noindent="true">
       but additionally has a<nbsp/>splash screen.)
       </p>
       </dd>
       <dt><opt tag="batch"/> (or <tt>-b</tt>)</dt>
       <dd>
       Invoke <app/> in batch mode (default).
       </dd>
       <dt><opt tag="out"/> <meta>filename</meta>
         (or <tt>-o</tt> <meta>filename</meta>)</dt>
       <dd>
       Save the database to <meta>filename</meta> (batch mode only).
       </dd>
       <dt><opt tag="in"/> (or <tt>-i</tt>) <meta>datatool file</meta></dt>
       <dd>Load <meta>datatool file</meta>.</dd>
       <dt><opt tag="version"/> (or <tt>-v</tt>)</dt>
       <dd>Print the version details to STDOUT and exit.</dd>
       <dt><opt tag="help"/> (or <tt>-h</tt>)</dt>
       <dd>Print a brief summary of available options to STDOUT and exit.</dd>
       <dt><opt tag="debug"/></dt>
       <dd>Enables debug mode.</dd>
       <dt><opt tag="nodebug"/></dt>
       <dd>Disables debug mode. (Default.)</dd>
       <dt><opt tag="delete-tmp-files"/></dt>
       <dd>Delete temporary files on exit. (Default.)</dd>
       <dt><opt tag="nodelete-tmp-files"/></dt>
       <dd>Don't delete temporary files on exit.</dd>
       <dt><opt tag="map-tex-specials"/></dt>
       <dd>Map <TeX/> special characters when importing data from 
       <acr tag="csv"/> or <acr tag="sql"/>.</dd>
       <dt><opt tag="nomap-tex-specials"/></dt>
       <dd>Don't map <TeX/> special characters when importing data from
       <acr tag="csv"/> or <acr tag="sql"/>. (Default.)</dd>
       <dt><opt tag="seed"/> <meta>number</meta></dt>
       <dd>Set the random generator seed to <meta>number</meta> or clear it
       if <meta>number</meta> is <tt>""</tt>. (See <ref tag="shuffle"/>.)</dd>
       <dt><opt tag="shuffle-iterations"/> <meta>number</meta></dt>
       <dd>Set the number of iterations to perform in a<nbsp/>shuffle to 
       <meta>number</meta>. (See <ref tag="shuffle"/>.)</dd>
       <dt><opt tag="shuffle"/></dt>
       <dd>Shuffle the database. (Shuffle is always performed after sort,
       regardless of the option order.)</dd>
       <dt><opt tag="noshuffle"/></dt>
       <dd>Don't shuffle the database. (Default.)</dd>
       <dt><opt tag="sort"/> [<meta>prefix</meta>]<meta>field</meta></dt>
       <dd>Sort the database according to the column whose label is
       <meta>field</meta>. Optionally, <meta>prefix</meta> may be
       <tt>+</tt> (ascending order) or <tt>-</tt> (descending order).
       If <meta>prefix</meta> is omitted, ascending is assumed.
       (See <ref tag="sort"/>.)</dd>
       <dt><opt tag="csv" /> <meta>csv file</meta></dt>
       <dd>Import data from the given <acr tag="csv"/> file.
       (See <ref tag="importcsv"/>)</dd>
       <dt><opt tag="sep" /> <meta>character</meta></dt>
       <dd>Specify the character used to separate values in the 
       <acr tag="csv" /> file. (Defaults to a<nbsp />comma)</dd>
       <dt><opt tag="delim" /> <meta>character</meta></dt>
       <dd>Specify the character used to delimit values in the 
       <acr tag="csv" /> file. (Defaults to a<nbsp />double quote)</dd>
       <dt><opt tag="csvheader" /></dt>
       <dd>The <acr tag="csv"/> file has a header row. (Default.)</dd>
       <dt><opt tag="nocsvheader" /></dt>
       <dd>The <acr tag="csv"/> file doesn't have a header row.</dd>
       <dt><opt tag="sql"/> <meta>statement</meta></dt>
       <dd>Import data from an <acr tag="sql"/> database where <meta>statement</meta>
           is an <acr tag="sql"/> SELECT statement.
       (See <ref tag="importsql"/>)</dd>
       <dt><opt tag="sqldb"/> <meta>name</meta></dt>
       <dd>The <acr tag="sql"/> database name.</dd>
       <dt><opt tag="sqlprefix"/> <meta>prefix</meta></dt>
       <dd>The <acr tag="sql"/> prefix. (Default: <dq><tt>jdbc:mysql://</tt></dq>.)</dd>
       <dt><opt tag="sqlport"/> <meta>port</meta></dt>
       <dd>The <acr tag="sql"/> port number. (Default: 3306.)</dd>
       <dt><opt tag="sqlhost"/> <meta>host</meta></dt>
       <dd>The <acr tag="sql"/> host. (Default: <dq><tt>localhost</tt></dq>.)</dd>
       <dt><opt tag="sqluser"/> <meta>user name</meta></dt>
       <dd>The <acr tag="sql"/> user name.</dd>
       <dt><opt tag="sqlpassword"/> <meta>password</meta></dt>
       <dd>The <acr tag="sql"/> password (insecure). If omitted, you will be prompted 
       for<nbsp />a password if you try to import data from an <acr tag="sql"/> 
       database.</dd>
       <dt><opt tag="wipepassword"/></dt>
       <dd>For extra security, wipe the password from memory as soon as it 
       has been used to connect to an <acr tag="sql"/> database. (Default.)</dd>
       <dt><opt tag="nowipepassword"/></dt>
       <dd>Don't wipe the password from memory as soon as it 
       has been used to connect to an <acr tag="sql"/> database.</dd>
       <dt><opt tag="probsoln"/> <meta>filename</meta></dt>
       <dd>Import <sty>probsoln</sty> data from <meta>filename</meta>.
       (See <ref tag="importprobsoln"/>.)</dd>
     </dl>
     You can't combine any of the following options: <opt tag="in"/>, 
     <opt tag="csv"/>, <opt tag="sql"/>, <opt tag="probsoln"/>.
     </p>
   </node>
   <node tag="notaspreadsheet" type="section" title="What it isn't">
   <p>
   The <app/> application isn't intended to have the full functionality of
   a<nbsp/>spreadsheet. Its purpose is to allow you to edit <sty>datatool</sty> databases with 
   multilined entries. If your data just consists of numbers or short 
   single-lined text, then you'll probably be better off just using 
   a<nbsp/>spreadsheet to input the data and use <app/> in batch mode to
   convert from <acr tag="csv"/> to a<nbsp/><sty>datatool</sty> file.
   </p>
   </node>
   <node tag="fileext" type="section" title="File Extensions">
   <p>
   The <sty>datatool</sty> database files loaded and saved by <app/>
   are just <LaTeX/> files, so they could simply have the standard
   <tt>.tex</tt> extension, but to help differentiate the database files
   from other files containing <TeX/>/<LaTeX/> code (such as picture-drawing
   code), <app/> assumes a<nbsp/>default extension of <tt>.dbtex</tt>.
   If you use this extension, remember to include it in the argument of
   <cs tag="input"/>. Note that the database label (as used in commands
   like <cs tag="DTLnewdb"/>) is independent of the file name (although
   when importing data, it defaults to the file base name). The database
   label can be changed using <menu tag="edit.edit_dbname"/>.
   </p>
   <example>
   Suppose you have a<nbsp/>database file called <tt>my-data.dbtex</tt>
   and you have set the database label to just <dq><tt>data</tt></dq>.
   Then you can load and display the data using:
   <pre>
\documentclass{article}
\usepackage{datatool}% remember to load the datatool package

\input{my-data.dbtex}% load the database from file `my-data.dbtex'

\begin{document}

\DTLdisplaydb{data}% Display the database identified by the name `data'

\end{document}
   </pre>
   </example>
   </node>
   <node tag="verbatim" type="section" title="Verbatim">
   <p>
   Since the contents of the database are stored in a<nbsp/><TeX/> token
   register, and assigned to control sequences via commands like
   <cs tag="DTLforeach"/>, verbatim text is not permitted. This is 
   a<nbsp/>common problem when attempting to use verbatim text within
   a<nbsp/>command and is covered in the UK List of <TeX/> Frequently
   Asked Questions (<url www="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=verbwithin" text="Why doesn't verbatim work within...?"/>).
   The <app/> application checks for verbatim text<footnote>More
   specifically, it checks for any occurrences of <cs tag="verb"/>, 
   <cs tag="lstinline"/> or the beginning of the <env tag="verbatim"/>
   or <env tag="lstlisting"/> environments.</footnote> when you load a<nbsp/>database or import
   data (unless the <dq>map <TeX/> special characters</dq> property is set for
   <acr tag="csv"/> or <acr tag="sql"/> imports). Also, <app/> checks for
   verbatim text when you edit the contents of a<nbsp/>cell. If it
   detects any, it will give a<nbsp/>warning. If you ignore the warning, 
   <TeX/> will give an error if you then attempt to load the database into
   a<nbsp/>document.
   </p>
   <p>
   If you just have a<nbsp/>short fragment of inline verbatim text, consider
   one of the alternatives listed in <url www="http://www.tex.ac.uk/cgi-bin/texfaq2html?label=verbwithin" text="the FAQ"/>.
   If on the other hand you have a<nbsp/>block of verbatim text you'll have 
   to put the verbatim text in a<nbsp/>separate file
   and load it using <cs tag="verbatiminput"/> (from the 
   <sty>verbatim</sty> package) or <cs tag="lstinputlisting"/> (from the
   <sty>listings</sty> package). For example, in <ref tag="ex.verb"/> 
   I<nbsp/>have used <cs tag="lstinputlisting"/>.
   </p>
     <float type="figure" tag="ex.verb" caption="Verbatim Blocks Need to be in Separate Files" pos="htb">
      <image scale="0.75" alt="Image of main window showing cells with listing input" src="images/verb.png" />
     </float>
   <p>
   This requires two files: <tt>HelloWorld.java</tt>
   </p>
   <verbinput src="../tests/HelloWorld.java"/>
   <p noindent="true">
   and <tt>HelloUser.java</tt>:
   </p>
   <verbinput src="../tests/HelloUser.java"/>
   <p>
   Assuming that I've saved my database in a<nbsp/>file called
   <tt>prob-verb.dbtex</tt> with database label <dq><tt>problems</tt></dq>,
   here's a<nbsp/>sample document:
   </p>
   <verbinput src="../tests/test-probsoln-doc.tex"/>
   </node>
   <node tag="gui" type="chapter" title="Graphical Mode">
     <p>
       To run <app/> in graphical mode you must invoke it with either 
       <app/><tt>-gui</tt> or <app/><nbsp/><opt tag="gui"/>. The main window
       is shown in <ref tag="mainwindow"/>. Each database is
       in a<nbsp/>tabbed pane, with the name of the database in the
       tab. Note that the name corresponds to the database's identifying
       label, as used in commands like <cs tag="DTLnewdb"/>. This is 
       not necessarily the same as the filename. Since this name is
       used as a label, it shouldn't contain any of <TeX/>'s special
       characters or any other active characters that could cause problems.
       An asterisk <tt>*</tt> following the label in the tab indicates that 
       the database has been modified.
     </p>
     <float type="figure" tag="mainwindow" caption="Main Window" pos="htb">
      <image scale="0.75" alt="Image of main window" src="images/mainwindow.png" />
     </float>
     <p>
      You can use the <menu tag="file" /> menu to create a<nbsp />new 
      database, load an existing database or import data (see 
      <ref tag="import"/>). To load an existing database, use
      <menu tag="file.open" />. These database files contain <LaTeX/> code
      in a<nbsp/>specific format. The <app/> application assumes 
      a<nbsp/><tt>.dbtex</tt> file extension (see <ref tag="fileext"/>).
      You can load these files into a<nbsp/><LaTeX/> document using 
      <cs tag="input"/>, but remember to specify the <tt>.dbtex</tt> 
      extension. (Also remember to load the <sty>datatool</sty> package.)
     </p>
     <p>
     Each column has a corresponding data type: string, integer, real
     or currency. The type is automatically detected from the column data,
     but can be changed using the <menu tag="edit.column.edit_header"/>
     menu item or by double-clicking on the column header.
     </p>
     <p>
     Non-string entries can be edited by double-clicking on the relevant cell, 
     or you can select the relevant cell and use <menu tag="edit.edit_cell"/>.
     In the first case, a cursor will appear in the cell and you 
     can edit the numerical value and press <dq>Enter</dq> to finish 
     editing. In the second case, the cell editor dialog box will 
     open, see <ref tag="celleditor"/>.
     </p>
     <p>
     <b>Only the first few lines of a string entry are visible in the main 
     window. If an entry has more than that number of lines, you will need to 
     use the cell editor dialog box to view the entire contents of that 
     cell.</b> The default row height can be changed in the
     <dict tag="preferences.title"/> dialog box (see <ref tag="preferences"/>).
     </p>
     <p>
     To edit or view an entry in a column
     with the <dq>string</dq> data type, double-click on the relevant cell or 
     select the cell and use <menu tag="edit.edit_cell"/> to open the cell editor 
     dialog box (see <ref tag="celleditor" />). You can now scroll through
     the cell contents.
     </p>
   </node>
   <node tag="celleditor" type="section" title="Cell Editor">
   <p>
   To open the cell editor dialog box (see <ref tag="fig.celleditor" />)
   double-click on the required cell, which must be in a column with a 
   string data type. Alternatively, select the cell (of any type) and use 
   <menu tag="edit.edit_cell"/>.
   </p>
   <float type="figure" tag="fig.celleditor" caption="Cell Editor Dialog">
     <image scale="0.75" alt="Image of cell editor dialog" src="images/celleditor.png" />
   </float>
   <p>
   Remember that the contents of the cell should be <LaTeX/> code, so be
   careful if you use any of <TeX/>'s special characters. Also, see the
   section on verbatim text (<ref tag="verbatim"/>) if you haven't 
   already read it.
   Once you have made your edits, click on <dq><dict tag="button.okay" /></dq>
   to update the database. To discard the edits, click 
   <dq><dict tag="button.cancel" /></dq>.
   </p>
   <p>
   If you've used <sty>datatool</sty>, you will probably know that 
   if you want a paragraph break in your cell entries you need to use 
   <cs tag="DTLpar"/>, but with <app/> you don't need to worry about it 
   as blank lines in an entry will automatically be converted behind 
   the scenes. Note that redundant blank lines will be removed.
   </p>
   </node>
   <node tag="tools" type="chapter" title="Tools">
   <p>
   There are currently two tools available: sort (see <ref tag="sort"/>)
   and shuffle (see <ref tag="shuffle"/>). These both reorder the rows of the
   database and can be invoked either from the <menu tag="tools"/> menu
   or from the command line (as long as
   you have also loaded a<nbsp/>database using <opt tag="in"/> or one of the
   import options). If you use both <opt tag="sort"/> and <opt tag="shuffle"/>
   in the command line invocation, sort will always be performed first, 
   regardless of the option order.
   </p>
   </node>
   <node tag="sort" type="section" title="Sorting the Data">
   <p>
   A<nbsp/>database can be sorted according to a<nbsp/>particular column
   in either ascending or descending order. In <acr tag="gui"/> mode, this
   can be done using the <menu tag="tools.sort"/> menu item.
   </p>
   </node>
   <node tag="shuffle" type="section" title="Shuffling the Data">
   </node>
   <node tag="import" type="chapter" title="Importing Data">
   <p>
   Data can be imported from <acr tag="csv"/> files (see 
   <ref tag="importcsv"/>), <acr tag="sql"/> databases (see 
   <ref tag="importsql"/>) or from files that can be imported with 
   the <sty>probsoln</sty> package's <cs tag="loadallproblems"/> command
   (see <ref tag="importprobsoln"/>). In the case of the first
   two, <app /> can automatically convert <TeX />'s special characters if the
   <opt tag="map-tex-specials"/> command line option is used or the
   <dq><dict tag="preferences.tex.map"/></dq> option has been selected in the 
   <dict tag="preferences.title"/> dialog box (see <ref tag="preferences"/>).
   </p>
   </node>
   <node tag="importcsv" type="section" title="Import CSV Data">
   <p>
   Data can be imported from a<nbsp/><acr tag="csv"/> file using
   the <opt tag="csv"/> command line option or (in <acr tag="gui"/> mode)
   using the <menu tag="file.import.importcsv"/> menu item. The default
   separator is a<nbsp/>comma and the default delimiter is the double-quote
   character. These can be changed using the <opt tag="sep"/> and 
   <opt tag="delim"/> command line options or in the 
   <dict tag="preferences.title"/>
   dialog box (see <ref tag="preferences"/>). Unlike <sty>datatool</sty>'s
   <cs tag="DTLloaddb"/> command, <app/> can import data with multilined
   entries (via the Open<nbsp/>CSV library 
   <url www="http://opencsv.sourceforge.net/"/>).
   Multiple blank lines within entries are automatically converted to
   <cs tag="DTLpar"/> (although you won't see this in <acr tag="gui"/>
   mode).
   </p>
   <p>
   If the <acr tag="csv"/> file has a<nbsp/>header row, you must make sure 
   the <opt tag="csvheader"/> option is used or the 
   <dq><dict tag="preferences.csv.hasheader"/></dq> option is checked in the
   <dict tag="preferences.title"/> dialog box.
   If the <acr tag="csv"/> file has no header row, you must make sure 
   the <opt tag="nocsvheader"/> option is used or the 
   <dq><dict tag="preferences.csv.hasheader"/></dq> option is unchecked in the
   <dict tag="preferences.title"/> dialog box.
   </p>
   <example>
   Consider the <acr tag="csv"/> file shown below:
   <verbinput src="../tests/test-para.csv" />
   This has a cell with multiple lines. When it's imported into
   <app/>, the paragraph break is converted to <cs tag="DTLpar"/>.
   However, this isn't visible when you look at the file in 
   <acr tag="gui"/> mode (see <ref tag="ex.csvpara"/>).
     <float type="figure" tag="ex.csvpara" caption="Paragraph Breaks Appear as a Single Blank Line">
      <image scale="0.75" alt="Image of main window showing cell with paragraph break" src="images/csvpara.png" />
     </float>
   Note that the redundant second blank line in the <acr tag="csv"/> file
   has gone as multiple blank lines are replaced by a<nbsp/>single
   <cs tag="DTLpar"/>.
   </example>
   </node>
   <node tag="importsql" type="section" title="Import SQL Data">
   <p>
   Data can be imported from an<nbsp/><acr tag="sql"/> database using
   the <opt tag="sql"/> command line option or the 
   <menu tag="file.import.importsql"/> menu item. You additionally need to
   supply the database, port, prefix, host, user name and password. In batch 
   mode, you can use the command line options <opt tag="sqldb"/>,
   <opt tag="sqlport"/>, <opt tag="sqlprefix"/>, <opt tag="sqlhost"/> and
   <opt tag="sqluser"/>. You can specify the password with 
   <opt tag="sqlpassword"/>, but that isn't secure. If you don't use that, 
   you will be prompted for the password, where the text you enter 
   won't be visible. See <ref tag="introduction"/> for more details
   about command line options.
   </p>
   <p>
   In <acr tag="gui"/> mode, when you use <menu tag="file.import.importsql"/>
   the dialog box shown in <ref tag="sqlimportdialog"/> will be displayed,
   where you can enter the settings. In addition to the above named settings,
   you must also specify the <acr tag="sql"/> SELECT statement that identifies 
   the required data to import. (This manual assumes that if you have
   data in an <acr tag="sql"/> database, then you have a<nbsp/>basic
   knowledge of <acr tag="sql"/> syntax.)
   </p>
     <float type="figure" tag="sqlimportdialog" caption="SQL Import Dialog Box">
      <image scale="0.75" alt="Image of the SQL dialog box" src="images/sqlimportdialog.png" />
     </float>
   <p>
   For example, in <ref tag="sqlimportdialog"/> I<nbsp/>want to import all
   data from the table called <tt>customers</tt> in the <term tag="mysql"/>
   database called <tt>myshop</tt>. (I've created a<nbsp/>user called
   <tt>shopadmin</tt> with SELECT privileges for this database.) Once I've 
   entered this information,
   I<nbsp/>then click on <dq><dict tag="button.okay"/></dq> and the password
   dialog box will appear (see <ref tag="sqlpassworddialog"/>).
   </p>
     <float type="figure" tag="sqlpassworddialog" caption="Password Dialog Box">
      <image scale="0.75" alt="Image of the password dialog box" src="images/sqlpassworddialog.png" />
     </float>
   <p>
   Alternatively, I<nbsp/>can use batch mode to import and save the data 
   from the command prompt:
   </p>
   <pre>
[nlct@dickimaw tests]$ datatooltk --out customers.dbtex \
--sql "SELECT * FROM customers" --sqldb myshop --sqluser shopadmin
Password:
   </pre>
   <p>
   The password should be entered at the <dq><dict tag="password.prompt"/></dq>
   prompt.
   </p>
   </node>
   <node tag="importprobsoln" type="section" title="Import probsoln Data">
   <p>
   The <sty>probsoln</sty> package allows you to define problems (and 
   optionally their solutions) using <cs tag="newproblem"/> or the
   <env tag="defproblem"/> environment. <app/> can load a<nbsp/>file
   containing these definitions and convert the <sty>probsoln</sty> data
   into a<nbsp/><sty>datatool</sty> database containing three columns
   with keys: <tt><dict tag="probsoln.label"/></tt>, 
   <tt><dict tag="probsoln.question"/></tt> and
   <tt><dict tag="probsoln.answer"/></tt>. You can import one of these
   files using the <opt tag="probsoln"/> command line option or (in
   <acr tag="gui"/> mode) using the <menu tag="file.import.importprobsoln"/>
   menu item.
   </p>
   <p>
   <TeX/> is a<nbsp/>difficult language to parse, so <app/> uses 
   <LaTeX/> to help gather the data from the imported file.
   <app/> creates a<nbsp/>temporary <LaTeX/> file and runs <LaTeX/>
   on it in the background. It assumes that the <tt>latex</tt> application
   is on your path. If this isn't the case, you will have to specify
   the location of the <tt>latex</tt> executable in the 
   <dict tag="preferences.title"/> dialog box (see <ref tag="preferences"/>).
   The temporary files are deleted when you quit <app/> unless you have
   used the <opt tag="nodelete-tmp-files"/> option.
   </p>
   <p>
   <b>Note:</b> <app/> doesn't support problems that require arguments. Any
   instance of <hash/><meta>n</meta> will be replaced with
   <hash/><hash/><meta>n</meta>, but you will have to replace those
   with something else. Also, recall from <ref tag="verbatim"/> that you
   can't have verbatim text in a<nbsp/><sty>datatool</sty> database, 
   but you can use <cs tag="verbatiminput"/> (from the 
   <sty>verbatim</sty> package) or <cs tag="lstinputlisting"/> (from the
   <sty>listings</sty> package). Since <LaTeX/> is used to gather the
   data, pretty-printing spaces and comments won't be imported.
   </p>
   <example>
   Consider the file called <tt>prob-mixed.tex</tt> that contains the 
   following:
   <verbinput src="../tests/prob-mixed.tex"/>
   <p>
   This contains a<nbsp/>mixture of <cs tag="newproblem"/> and
   <env tag="defproblem"/>. It also has comments and spaces to make
   the code more readable. As can be seen in <ref tag="importps"/>
   these have gone in the import.
   </p>
     <float type="figure" tag="importps" caption="Pretty Printing and Comments are Lost When Importing Data from probsoln">
      <image scale="0.75" alt="Image of the main window" src="images/importps.png" />
     </float>
   </example>
   </node>
   <node tag="preferences" type="chapter" title="Application Properties">
   <p>
   When <app/> is run, either in batch or <acr tag="gui"/> mode, 
   the application settings are read in from the properties file, 
   if it exists. Any command line options override those settings.
   If <app/> is run in <acr tag="gui"/> mode, the application properties are saved on exit. They are not saved in batch mode.
   </p>
   <p>
   The properties directory depends on the operating system.
   On Windows, it is a folder called <dq>datatooltk-settings</dq>
   in the folder given by the Java system property <tt>user.home</tt>.
   This is usually the user's home folder but in some versions of
   Java this can be <tt><percent/>userprofile<percent/></tt>.
   On other operating systems, the properties directory is
   called <tt>.datatooltk</tt> and is in the user's home directory.
   </p>
   <p>
   In <acr tag="gui"/> mode, the settings can be changed using
   <menu tag="edit.preferences"/>
   </p>
   </node>
   <node tag="developers" type="chapter" title="Info for Developers">
    <p>
    This chapter will be removed before release. In the <tt>tests</tt> 
    directory there's a test file <tt>data-raw.dbtex</tt> 
    (originally generated by <sty>datatool</sty>) and a test 
    document <tt>test-doc.tex</tt>, a test <acr tag="csv" />
    file and a test <acr tag="sql"/> file. The <acr tag="sql"/> file can be used to create
    a test <term tag="mysql"/> database. The batch mode can be tested using:
<pre>
        bin/datatooltk --out tests/test-out.dbtex tests/data-raw.dbtex
        bin/datatooltk --out tests/test-csv-out.dbtex --csv tests/test.csv
</pre>
   (The first command just reads in <tt>tests/data-raw.dbtex</tt> and writes it out as <tt>tests/test-out.dbtex</tt>. The second command imports data from <tt>tests/test.csv</tt> and saves it as <tt>tests/test-csv-out.dbtex</tt>.)
  </p>
  <p>
   Once you have created the <term tag="mysql"/> database, you can test it with:
<pre>
 bin/datatooltk --out tests/test-sql-data.dbtex \
   --sql "SELECT * FROM testsqldata" --sqldb datatooltk --sqluser datatool
</pre>
   After you have completed these steps, you can <LaTeX /> the test document <tt>test-doc.tex</tt>.
   </p>
   </node>
   <node tag="docediting" type="section" title="Editing this Document">
   <p>
   The source for this document is in XML. The Perl script 
   <tt>createdocs</tt> is used to convert the XML source into 
   <LaTeX /> and JavaHelp files. 
   </p>
   <p>
   Each sectional unit must be contained in a <tt>node</tt> element with a<nbsp /><tt>tag</tt> attribute that uniquely identifies it, a<nbsp />type attribute that identifies the sectioning level and a<nbsp />title attribute that specifies the title.
   </p>
   <p>
   Let's try out a table here (see <ref tag="tab.sample"/>).
   <float type="table" tag="tab.sample" caption="A sample table" >
    <tabular spec="lcr" >
     <tr>
      <td>
       A left aligned column.
      </td>
      <td>
       A centred column.
      </td>
      <td>
       A right aligned column.
      </td>
     </tr>
     <tr>
      <td>A</td>
      <td>B</td>
      <td>C</td>
     </tr>
     <tr>
       <td span="2" spec="c">A column spanning cell</td>
       <td>X</td>
     </tr>
    </tabular>
   </float>
   </p>
   </node>
   <node type="chapter" tag="licence" title="Licence" >
   <p>
   <app/> is licensed under the terms of the GNU General Public License.
   <app/> depends on the following third party libraries whose jar files are
   in the <tt>lib</tt> directory: Java Help 
   (<url www="https://javahelp.java.net/"/>),
   Open CSV (<url www="http://opencsv.sourceforge.net/"/>),
   MySQL connector (<url www="http://dev.mysql.com/downloads/connector/j/"/>)
   and the Java Look and Feel Graphics Repository
   (<url www="http://www.oracle.com/technetwork/java/index-138612.html"/>).
   </p>
     <verbtabinput src="LICENSE"/>
   </node>
   <printglossary />
   <printacronyms />
   <printindex />
  </document>
</manual>
